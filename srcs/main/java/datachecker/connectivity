package datachecker.connectivity;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import datachecker.dao.entity.ColumnRelationEntity;
import datachecker.dao.entity.SingleMismatchDataEntity;

@Service
public class JdbcConnection {

    @Value("${oracle.hostName}")
    private String oracleHostName;

    @Value("${oracle.port}")
    private String oraclePort;

    @Value("${oracle.serviceId}")
    private String oracleServiceId;

    @Value("${oracle.userName}")
    private String oracleUserName;

    @Value("${oracle.password}")
    private String oraclePassword;

    @Value("${oracle.schema}")
    private String oracleSchema;

    // JDBC driver name and database URL
    final String JDBC_DRIVER = "oracle.jdbc.driver.OracleDriver";

    Map<String, String> credentialsMap;
    Map<String, String> mongoCredentialsMap;

    Connection conn;
    String selectSql = "select %s from %s.%s";
    String checkChildInParentSQL = "select distinct %s from %s.%s where %s not in(select %s from %s.%s)  order by %s";

    String multiJoinSql = "select distinct * from ( SELECT %s from %s LEFT JOIN %s ON %s where %s )";

    public void prepareConnStatement() {
        try {
            Class.forName(JDBC_DRIVER);
            final String DB_URL = "jdbc:oracle:thin:@" + oracleHostName + ":" + oraclePort + ":" + oracleServiceId;
            System.out.println("Connecting to database.......");
            conn = DriverManager.getConnection(DB_URL, oracleUserName, oraclePassword);
//            runSampleQuery();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

  /*  public void runSampleQuery() throws SQLException {
        Statement statement = conn.createStatement(); 
        ResultSet resultSet = statement.executeQuery("select * from ACCOUNT.SEC_GRPMST");
        System.out.println("resultSet"+ resultSet);
    }*/

    public void destroyConnection() {
        try {
            conn.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void validateSingleDependencyParent(String childTableName, String parentTableName,
            ColumnRelationEntity childCol, List<SingleMismatchDataEntity> singleMismatchDataEntityList) {
        String childColumnName = childCol.getColumnName();
        String parentAliasName = childCol.getParentAliasName();
        String schema = credentialsMap.get(oracleSchema);

        String validateSql = String.format(checkChildInParentSQL, childColumnName, schema.toUpperCase(), childTableName,
                childColumnName, parentAliasName, schema.toUpperCase(), parentTableName, childColumnName);

        List<String> differenceColList = new ArrayList<>();

        Statement statement;
        try {
            statement = conn.createStatement();
            ResultSet childResultSet = statement.executeQuery(validateSql);
            differenceColList = processResultSet(childColumnName, childResultSet);
            persistInDbSinglekeyField(childColumnName, parentAliasName, childTableName, parentTableName, differenceColList, singleMismatchDataEntityList);
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    String joinEquate = " %s.%s = %s.%s ";
    String columnNullValidate = "%s.%s is null ";

    /* public void validateMultiDependencyParent(String childTable, String parentTable,
            List<ColumnRelationEntity> childCol, List<MultipleMismatchDataEntity> multipleMismatchDataEntityList) {

        String schema = credentialsMap.get(DbMatcherConsts.OracleSchema);
        String childTableName = schema + "." + childTable;
        String parentTableName = schema + "." + parentTable;

        String childColumnNames = childCol.stream().map(x -> (childTableName + "." + x.getColumnName()))
                .collect(Collectors.joining(", "));
        List<String> childColumnList = childCol.stream().map(ColumnRelationEntity::getColumnName)
                .collect(Collectors.toList());

        String joinCondition = childCol.stream().map(x -> String.format(joinEquate, childTableName, x.getColumnName(),
                parentTableName, x.getParentAliasName())).collect(Collectors.joining(" and "));
        String nullChecker = childCol.stream()
                .map(x -> String.format(columnNullValidate, parentTableName, x.getParentAliasName()))
                .collect(Collectors.joining(" and "));

        String validateSql = String.format(multiJoinSql, childColumnNames, childTableName, parentTableName,
                joinCondition, nullChecker);

        List<List<String>> differenceColList = new ArrayList<>();

        Statement statement;
        try {
            statement = conn.createStatement();
            ResultSet childResultSet = statement.executeQuery(validateSql);
            differenceColList = processResultSet(childColumnList, childResultSet);

            List<String> childColumnNameSet = childCol.stream().map(ColumnRelationEntity::getColumnName)
                    .collect(Collectors.toList());
            List<String> parentColumnNameSet = childCol.stream().map(ColumnRelationEntity::getParentAliasName)
                    .collect(Collectors.toList());
            persistInDbMultiplekeyField(childColumnNameSet, parentColumnNameSet, childTable, parentTable, 
                    differenceColList, multipleMismatchDataEntityList);
            statement.close();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }*/

     private List<String> processResultSet(String columnName, ResultSet childResultSet) {
        List<String> columList = new ArrayList<String>();
        try {
            while (childResultSet.next()) {
                String value = childResultSet.getString(columnName);
                columList.add(value);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return columList;
    }

    /*private List<List<String>> processResultSet(List<String> childColumnList, ResultSet childResultSet) {
        List<List<String>> columList = new ArrayList<>();
        try {
            while (childResultSet.next()) {
                List<String> value = childColumnList.stream().map(x -> {
                    try {
                        return childResultSet.getString(x);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    return x;
                }).collect(Collectors.toList());
                columList.add(value);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return columList;
    }*/

    private void persistInDbSinglekeyField(String childCol, String parentCol, String childTable, String parentTable,
            List<String> differenceColList, List<SingleMismatchDataEntity> singleMismatchDataEntityList) {
        List<SingleMismatchDataEntity> smdeList = differenceColList.stream()
                .map(x -> SingleMismatchDataEntity.builder().childColumnName(childCol).parentColumnName(parentCol)
                        .childTable(childTable).parentTable(parentTable).differenceColData(x).build())
                .collect(Collectors.toList());
//        String mongoStoreFlag = mongoCredentialsMap.get(DbMatcherConsts.MongodbStore);
//
//        if (smdeList != null && smdeList.size() > 0 && mongoStoreFlag.equals(DbMatcherConsts.True)) {
//            MongoConnector mc = new MongoConnector(mongoCredentialsMap);
//            mc.persistSingleMismatchToCollection(smdeList);
//            singleMismatchDataEntityList.addAll(smdeList);
//        }
    }

    /*private void persistInDbMultiplekeyField(List<String> childCol, List<String> parentCol, String childTable, String parentTable,
            List<List<String>> differenceColList, List<MultipleMismatchDataEntity> multipleMismatchDataEntityList) {
        List<MultipleMismatchDataEntity> smdeList = differenceColList.stream()
                .map(x -> MultipleMismatchDataEntity.builder().childColumnName(childCol).parentColumnName(parentCol)
                        .childTable(childTable).parentTable(parentTable).differenceColData(x).build())
                .collect(Collectors.toList());
        String mongoStoreFlag = mongoCredentialsMap.get(DbMatcherConsts.MongodbStore);

        if (smdeList != null  && mongoStoreFlag.equals(DbMatcherConsts.True)) {
            MongoConnector mc = new MongoConnector(mongoCredentialsMap);
                mc.persistMultiMismatchToCollection(smdeList);
                multipleMismatchDataEntityList.addAll(smdeList);
        }
    }*/
}
